#!/usr/bin/env python3

"""
@file       pyms
@date       27/05/2023
@version    1.2.4
@changelog  - CTRL+C bugfixes.
@license    GNU General Public License v2.0
@url        github.com/Julynx/pyms
@author     Julynx
"""

import os
import sys
import signal
import random
import time
import threading
import subprocess
import contextlib
from collections import defaultdict
from dataclasses import dataclass
from functools import lru_cache
import cursor
from pynput import keyboard
with contextlib.redirect_stdout(None):
    import pygame
import mutagen

HELP_MSG = '''
Usage:
    pyms [OPTIONS]          Play a random song from '~/Music'.
    pyms [FILE] [OPTIONS]   Play a specific song.
    pyms [DIR.] [OPTIONS]   Play a random song from a directory.

OPTION:
    --update-interval=<X>   Redraw the UI every X seconds.
    --no-infinite-queue     Stop playback when the song ends.
    --no-clear              Don't clear the screen between UI updates.
                              This may help prevent flickering on
                              some terminals.
    -h, --help              Print this message and exit.
    -v, --version           Print version information and exit.
'''

VERSION = "1.2.4"


@dataclass
class Bindings:
    pause = keyboard.Key.f10
    seekBwd = keyboard.Key.f8
    seekFwd = keyboard.Key.f9
    next = keyboard.Key.f12


@dataclass
class UI:
    no_clear = False
    box_width = 46
    playIdx = 6
    file_pos = 0

    box = [("----", False),
           ("", True),
           ("░"*box_width, True),
           ("", True),
           ("--:--", True),
           ("", True),
           ("██████    ██  ██    █  ▄██    ██▄  █    █ ▄███", True),
           ("██████    ██  ██    █ ████    ████ █      ██  ", True),
           ("██████    ██  ██    █  ▀██    ██▀  █    ███▀ █", True),
           ("", True),
           ("CTRL+C     F10        F8        F9       F12  ", True)]

    play = ["██▄▄  ",
            "██████",
            "██▀▀  "]

    pause = ["██  ██",
             "██  ██",
             "██  ██"]


@dataclass
class Files:
    m_file = ""


# --- Signal handling functions
def exit_handler(signum, frame):
    """
    Executes whenever the signal SIGINT is received.
    Stops the player, clears the screen and restores
    the cursor.

    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    pygame.mixer.music.stop()
    os.system("clear")
    cursor.show()
    os._exit(0)


def resize_handler(signum, frame):
    """
    Executes whenever the signal SIGINT is received.
    Updates and redraws the UI.

    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    global UI

    UI.box[2] = (update_bar(), True)
    UI.box[4] = (update_bar_txt(), True)
    redraw()


# --- UI functions
def swap_symbol(symbols):
    """
    Replaces the old symbol with the new symbol passed in as argument.
    Args:
        symbol (list<str>): The new symbol.
    """
    global UI

    for i, symbol in enumerate(symbols):

        line = UI.box[UI.playIdx+i][0][0:10] \
            + symbol \
            + UI.box[UI.playIdx+i][0][16:]

        UI.box[UI.playIdx+i] = (line, True)


def redraw():
    """
    Clears the screen and redraws the ui.
    """

    @lru_cache
    def interface(lines, box_width):
        """
        Creates a box of the terminal size, enclosing the lines
        passed in as a list of tuples.

        Args:
            lines (list): A list of tuples, each containing a line and a bool.
            The line is the text to be displayed, and the boolean is whether
            the line should be centered.

        Returns:
            str: A string of the box with the lines fitted in.
        """
        term_size = os.get_terminal_size()
        term_width = term_size.columns
        term_height = term_size.lines
        string = "\n" * (int(term_height/2) - int(len(lines)/2))
        dots = "..."

        # Limit according to terminal height
        lines = lines[:term_height-1]

        # Create the body
        for tupl in lines:
            line = tupl[0]
            line_len = len(line)

            # Shorten the line if it is too long
            if line_len > min(box_width, term_width):
                line = line[:min(box_width, term_width) - len(dots)] + dots

            if tupl[1]:
                # Center the line
                formatted_line = line.center(min(box_width, term_width))

            else:
                # Left justify the line
                formatted_line = line.ljust(min(box_width, term_width))

            # Center the final line
            formatted_line = formatted_line.center(term_width)
            string += formatted_line

        if UI.no_clear:
            string += "\n" * (int(term_height/2) - int(len(lines)/2) - 2)

        return string

    if not UI.no_clear:
        subprocess.call(['tput', 'reset'])

    cursor.hide()

    print(interface(tuple(UI.box), UI.box_width), flush=True)


def update_bar():
    """
    Updates a song's progress bar calling the bar_parser function with the
    current and total seconds of the song.

    Returns:
        str: Song progress bar string.
    """

    def bar_parser(percentage, max_width):
        """
        Creates a bar of the given percentage.
        Args:
            percentage (float): The percentage of the bar to be filled.
            max_width (int): The maximum width of the bar.
        Returns:
            str: A string of the bar.
        """
        bar_width = int(percentage * max_width)
        bar_txt = "█" * bar_width + "░" * (max_width - bar_width)

        return bar_txt

    # Load the audio file to mutagen
    audio = mutagen.File(Files.m_file)

    # Obtain current and total times
    curr_time = UI.file_pos / 1000
    total_time = max(int(audio.info.length), 1)

    # Calculate the percentage of the song that is played
    percentage = curr_time / total_time

    # Get the progress bar
    progress_bar = bar_parser(percentage, UI.box_width)
    return progress_bar


def update_bar_txt():
    """
    Updates a song_info string calling song_info_parser with the current
    time and total time of the song and returning the updated string.

    Returns:
        str: bar text string.
    """

    def song_info_parser(current_secs, total_secs, max_width):
        """
        Parses the current time and total time of the song.
        Args:
            current_secs (int): The current seconds of the song.
            total_secs (int): The total seconds of the song.
            max_width (int): The maximum width of the line.
        Returns:
            str: A string of the bar text.
        """
        # Convert the seconds to minutes and seconds
        current_mins, current_secs = divmod(current_secs, 60)
        total_mins, total_secs = divmod(total_secs, 60)

        # Format the time
        current_time = "{:02d}:{:02d}".format(current_mins, current_secs)
        total_time = "{:02d}:{:02d}".format(total_mins, total_secs)

        # Format the final info string
        half_width = int(max_width / 2)
        line = current_time.ljust(half_width) + total_time.rjust(half_width)
        return line

    # Load the audio file to mutagen
    audio = mutagen.File(Files.m_file)

    # Obtain current and total times
    curr_time = int(UI.file_pos / 1000)
    total_time = int(audio.info.length)

    # Call song_info_parser to get the bar text
    song_info = song_info_parser(curr_time, total_time, UI.box_width)
    return song_info


def poll_interface(poll_interval):
    """
    Updates the progress bar and the song time info every interval.
    The thread is blocked updating the bar until the song is finished.
    """
    global UI

    # Clear at the beginning if the redraws are set
    # to not clear each time. Else this is not needed.
    if UI.no_clear:
        os.system("clear")

    while True:

        # Update bar and bar text and redraw
        UI.box[2] = (update_bar(), True)
        UI.box[4] = (update_bar_txt(), True)
        redraw()

        # Sleep until the screen has to be updated again
        time.sleep(poll_interval)
        if pygame.mixer.music.get_busy():
            UI.file_pos += poll_interval * 1000

# --- Filename and string functions


def strip_path_from_filename(path):
    """
    Removes the path from the filename.

    Args:
        path (str): Full path to the file.

    Returns:
        str: The filename without the path.
    """
    if "/" in path:
        filename = path.split("/")[-1]
        return filename
    return path


def strip_filename_from_path(path):
    """
    Removes the filename from the path.

    Args:
        path (str): Full path to the file.

    Returns:
        str: The path without the filename.
    """
    if "/" not in path:
        return os.getcwd()
    words = path.split("/")
    words = words[:-1]
    new_path = "/".join(words)
    return new_path + "/"


def random_file(path):
    """
    Returns a random file from the given path.

    Args:
        path (str): The path to the directory to search.

    Returns:
        str: A random file from the given path.
    """
    old_filename = strip_path_from_filename(path)
    stripped_path = strip_filename_from_path(path)

    # Consider only music files in the directory
    ext = (".mp3", ".wav", ".ogg", ".flac")
    files = os.listdir(stripped_path)

    music_files = [f
                   for f
                   in files
                   if f.endswith(ext) and f != old_filename]

    music_files += [old_filename] if len(music_files) == 0 else []

    try:
        # Get a random file from the directory (dont repeat the original file)
        r_file = random.choice(music_files)
    except (IndexError, ValueError) as esc:
        raise pygame.error(f"No music files found in the directory.\n{esc}")

    # Return the path to the new random file
    return os.path.join(stripped_path, r_file)


# --- Keyboard handling functions
def keyboard_listener():
    """
    Executes in a separate thread to capture pressed keys.
    Keeps that thread blocked until a key is pressed and then
    the key is captured and handled.
    """
    global UI, Files

    press_or_release = defaultdict(lambda: 0)

    with keyboard.Events() as events:
        for event in events:

            # (Clear user input)
            print(" "*16 + "\r", end="")

            # (Check only for key presses)
            press_or_release[event.key] += 1
            if not press_or_release[event.key] % 2:
                continue

            # -- Handle key presses --
            if event.key == Bindings.pause:
                if pygame.mixer.music.get_busy():
                    pygame.mixer.music.pause()
                    swap_symbol(UI.play)
                    redraw()
                else:
                    pygame.mixer.music.unpause()
                    swap_symbol(UI.pause)
                    redraw()

            elif event.key == Bindings.seekBwd:
                song_length = 1000 * mutagen.File(Files.m_file).info.length
                skip_amount = 0.025 * song_length

                next_pos = UI.file_pos - skip_amount
                start_pos = 0
                UI.file_pos = max(next_pos, start_pos)
                pygame.mixer.music.play(start=UI.file_pos/1000)

                UI.box[2] = (update_bar(), True)
                UI.box[4] = (update_bar_txt(), True)
                swap_symbol(UI.pause)
                redraw()

            elif event.key == Bindings.seekFwd:
                song_length = 1000 * mutagen.File(Files.m_file).info.length
                skip_amount = 0.025 * song_length

                next_pos = UI.file_pos + skip_amount
                end_pos = song_length
                UI.file_pos = min(next_pos, end_pos)
                pygame.mixer.music.play(start=UI.file_pos/1000)

                UI.box[2] = (update_bar(), True)
                UI.box[4] = (update_bar_txt(), True)
                swap_symbol(UI.pause)
                redraw()

            elif event.key == Bindings.next:
                try:
                    # Get a random file, load it and play it
                    Files.m_file = random_file(Files.m_file)
                    pygame.mixer.music.load(Files.m_file)
                    pygame.mixer.music.play()

                    # Update the song title, info and bar
                    UI.file_pos = 0
                    UI.box[0] = (strip_path_from_filename(Files.m_file), False)
                    UI.box[2] = (update_bar(), True)
                    UI.box[4] = (update_bar_txt(), True)
                    swap_symbol(UI.pause)
                    redraw()

                except pygame.error:
                    # Rewind the current song if no random file is found
                    pygame.mixer.music.rewind()
                    if not pygame.mixer.music.get_busy():
                        pygame.mixer.music.unpause()

                        # Update the bar text and bar
                        UI.file_pos = 0
                        UI.box[2] = (update_bar(), True)
                        UI.box[4] = (update_bar_txt(), True)
                        swap_symbol(UI.pause)
                        redraw()


# --- Other functions
def infinite_queue(event_type):
    """
    Captures a song end event and adds a new song to the queue.
    The new song is randomly selected from the directory and played.
    The thread is blocked waiting for the song to end and only then
    it unblocks and plays the next song so run all the threads
    you would like to run before calling this function on the main thread.
    Args:
        event (pygame.event): The event that is captured. Usually MUSIC_END
    """
    global UI, Files

    while True:

        # When the song ends, play a new random song
        event = pygame.event.wait()
        if event.type == event_type:

            try:
                # Get a random file, load it and play it
                Files.m_file = random_file(Files.m_file)
                pygame.mixer.music.load(Files.m_file)
                pygame.mixer.music.play()

                # Update title, bar and bar text
                UI.file_pos = 0
                UI.box[0] = (strip_path_from_filename(Files.m_file), False)
                UI.box[2] = (update_bar(), True)
                UI.box[4] = (update_bar_txt(), True)
                swap_symbol(UI.pause)
                redraw()

            except pygame.error:
                pass


# --- Argument parsing functions
def args(positional=None):
    """
    Simple argument parser.

    Example:
    $: program joe 1234 -keep -host=127.0.0.1

    dictionary = args(["username", "password"])

    >> username:    joe
    >> password:    1234
    >> -keep:       True
    >> -host:       127.0.0.1

    Args:
        positional (str): A list of strings for the positional arguments.

    Returns:
        dict: A dictionary containing the argument names and their values.
    """

    positional = [] if positional is None else positional
    args_dict = {}

    # Store positional arguments
    tail = len(positional)
    for i, pos_arg in enumerate(positional):
        with contextlib.suppress(IndexError):
            if str(sys.argv[i+1]).startswith("-"):
                tail = i
                break
            value = sys.argv[i+1]
            args_dict[pos_arg] = value

    # Store flags
    for i in range(tail+1, len(sys.argv)):
        try:
            value = str(sys.argv[i]).split("=")[1]
        except IndexError:
            value = True
        args_dict[str(sys.argv[i]).split("=", maxsplit=1)[0]] = value

    return args_dict


# --- Main function
def main():
    """
    Main function.
    """
    global UI, Files
    update_interval = 1/2         # Default value: 2 fps
    enable_infinite_queue = True  # Default value: True

    ## Read input arguments ##
    arg = args(["path"])

    # No song
    if ("path" not in arg) or arg["path"].strip() in ["--help", "-h"]:

        if ('--help' in arg or '-h' in arg):
            print(HELP_MSG)
            sys.exit(0)

        if ('--version' in arg or '-v' in arg):
            print(VERSION)
            sys.exit(0)

        music_dir = subprocess.run(
            ["xdg-user-dir", "MUSIC"],
            stdout=subprocess.PIPE
        ).stdout.decode("utf-8").strip()

        arg["path"] = os.path.expanduser(music_dir)

    try:
        Files.m_file = arg["path"]
    except ValueError:
        print(HELP_MSG)
        sys.exit(1)

    # Update interval specified
    if "--update-interval" in arg:
        try:
            update_interval = int(arg["--update-interval"])
        except ValueError:
            print(HELP_MSG)
            sys.exit(1)

    # Infinite queue disabled
    if "--no-infinite-queue" in arg:
        try:
            enable_infinite_queue = not bool(arg["--no-infinite-queue"])
        except ValueError:
            print(HELP_MSG)
            sys.exit(1)

    # Screen clearing between updates disabled
    if "--no-clear" in arg:
        try:
            UI.no_clear = bool(arg["--no-clear"])
        except ValueError:
            print(HELP_MSG)
            sys.exit(1)

    # If the path is a folder, get a random file from it
    if os.path.isdir(Files.m_file):
        try:
            Files.m_file = Files.m_file + \
                "/" if Files.m_file[-1] != "/" else Files.m_file
            Files.m_file = random_file(Files.m_file)
        except pygame.error:
            print(f"Error: No music files found in '{Files.m_file}'.")
            sys.exit(1)

    # Set up signal handlers
    signal.signal(signal.SIGINT, exit_handler)
    signal.signal(signal.SIGWINCH, resize_handler)

    # Initialize pygame mixer
    pygame.init()

    try:
        # Load song and play it
        pygame.mixer.music.load(Files.m_file)
        UI.box[0] = (strip_path_from_filename(Files.m_file), False)
        pygame.mixer.music.play()

        # Send an event when the song ends
        MUSIC_END = pygame.USEREVENT+1
        pygame.mixer.music.set_endevent(MUSIC_END)

    except pygame.error:
        print(f"Error: Could not load file or directory '{Files.m_file}'.")
        sys.exit(1)

    # THRD1 - Initialize the keyboard listener
    th = threading.Thread(target=keyboard_listener)
    th.daemon = True
    th.start()

    # THRD2 - Initialize the infinite queue
    if enable_infinite_queue:
        th2 = threading.Thread(target=infinite_queue, args=(MUSIC_END,))
        th2.daemon = True
        th2.start()

    # MAIN - Poll the screen and update it
    poll_interface(update_interval)


if __name__ == "__main__":
    main()
